name: "Check file with Webhook"
description: "Check file for expected changes and send content to a webhook."
inputs:
  step:
    description: "Step document file to send."
    required: true
  submission:
    description: "Submission file to send."
    required: true
  solution:
    description: "Solution file to send."
    required: true
  webhook:
    description: "URL of the webhook."
    required: true
  authtoken:
    description: "Auth token for Twilio authentication."
    required: true
  accountsid:
    description: "Account SID for Twilio authentication."
    required: true
outputs:
  assessment:
    description: "True if the solution is correct"
  reason:
    description: "Reason for assessment"
runs:
  using: composite
  steps:
  - shell: bash
    env:
      STEPFILE: ${{ inputs.step }}
      SUBMISSIONFILE: ${{ inputs.submission }}
      SOLUTIONFILE: ${{ inputs.solution }}
      WEBHOOKURL: ${{ inputs.webhook }}
      AUTH_TOKEN: ${{ inputs.authtoken }}
      ACCOUNT_SID: ${{ inputs.accountsid }}
      GITHUB_USER_EMAIL: ${{ github.actor }}
      OUTPUT_ENV: $GITHUB_ENV
    run: |
      echo "Checking that all required environment variables are set"

      # Verify that required files exist
      for file in "$STEPFILE" "$SUBMISSIONFILE" "$SOLUTIONFILE"; do
        if [ ! -f "$file" ]; then
          echo "Error: File $file does not exist"
          exit 1
        fi
      done

      for var in WEBHOOKURL AUTH_TOKEN ACCOUNT_SID; do
        if [ -z "${!var}" ]; then
          echo "Error: $var is unset or empty"
          exit 1
        fi
      done

      echo "Reading file contents"
      step_content=$(<"$STEPFILE")
      submission_content=$(<"$SUBMISSIONFILE")
      solution_content=$(<"$SOLUTIONFILE")

      echo "Sending request to $WEBHOOKURL"

      # Store the curl command in a variable
      CURL_COMMAND="curl -s -w \"\n%{http_code}\" -X POST \"$WEBHOOKURL\" \
        -H \"Content-Type: application/json\" \
        -d '{\"identity\": \"email:${GITHUB_USER_EMAIL}\", \"session_id\": \"mysession\", \"body\": { \"step\": \"${step_content}\", \"submission\": \"${submission_content}\", \"solution\": \"${solution_content}\" }}' \
        -u \"$ACCOUNT_SID:$AUTH_TOKEN\""

      # Echo the curl command for debugging
      echo "Running the following cURL command:"
      echo "$CURL_COMMAND"

      # Execute the stored curl command and capture the response
      RESPONSE=$(eval "$CURL_COMMAND")

      # Extract the HTTP status code (last line)
      HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
      # Extract the JSON body (all lines except the last)
      BODY=$(echo "$RESPONSE" | sed '$d')

      # Print debugging information
      echo "HTTP Status Code: $HTTP_CODE"
      echo "Response Body: $BODY"

      if [ "$HTTP_CODE" -eq 200 ]; then
        echo "Request successfully sent to webhook"

        # Ensure jq is installed
        if ! command -v jq &> /dev/null; then
          echo "Installing jq..."
          sudo apt-get update && sudo apt-get install -y jq
        fi

        # Extract assessment and reason from JSON response
        ASSESSMENT=$(echo "$BODY" | jq -r '.assessment')
        REASON=$(echo "$BODY" | jq -r '.reason')

        # Print parsed values
        echo "Assessment: $ASSESSMENT"
        echo "Reason: $REASON"

        # Set outputs for the GitHub Action
        echo "assessment=$ASSESSMENT" >> "$OUTPUT_ENV"
        echo "reason=$REASON" >> "$OUTPUT_ENV"

      else
        echo "❌ Failed to send request to webhook. HTTP status code: $HTTP_CODE"
        echo "❌ Response body: $BODY"
        exit 1
      fi
