name: "Check file with Webhook"
description: "Check file for expected changes and send content to a webhook."
inputs:
  step:
    description: "Step document file to send."
    required: true
  submission:
    description: "Submission file to send."
    required: true
  solution:
    description: "Solution file to send."
    required: true
  webhook:
    description: "URL of the webhook."
    required: true
  authtoken:
    description: "Auth token for Twilio authentication."
    required: true
  accountsid:
    description: "Account SID for Twilio authentication."
    required: true
outputs:
  assessment:
    description: "True if the solution is correct"
  reason:
    description: "Reason for assessment"
runs:
  using: composite
  steps:
  - shell: bash
    env:
      STEPFILE: ${{ inputs.step }}
      SUBMISSIONFILE: ${{ inputs.submission }}
      SOLUTIONFILE: ${{ inputs.solution }}
      WEBHOOKURL: ${{ inputs.webhook }}
      AUTH_TOKEN: ${{ inputs.authtoken }}
      ACCOUNT_SID: ${{ inputs.accountsid }}
      GITHUB_USER_EMAIL: ${{ github.actor }}
    run: |
      echo "Checking that all required environment variables are set"

      # Verify required files exist
      for file in "$STEPFILE" "$SUBMISSIONFILE" "$SOLUTIONFILE"; do
        if [ ! -f "$file" ]; then
          echo "❌ Error: File $file does not exist"
          exit 1
        fi
      done

      for var in WEBHOOKURL AUTH_TOKEN ACCOUNT_SID; do
        if [ -z "${!var}" ]; then
          echo "❌ Error: $var is unset or empty"
          exit 1
        fi
      done

      # Read and format the content with titles
      echo "Reading file contents"
      step_content=$(cat "$STEPFILE" | sed 's/"/\\"/g')
      submission_content=$(cat "$SUBMISSIONFILE" | sed 's/"/\\"/g')
      solution_content=$(cat "$SOLUTIONFILE" | sed 's/"/\\"/g')

      # Concatenate with titles and delimiters if needed
      all_content="Instructions: ${step_content}\nSolution: ${solution_content}\nSubmission: ${submission_content}"

      # Construct JSON manually with properly escaped `body` as a string
      JSON_PAYLOAD="{\"identity\": \"email:${GITHUB_USER_EMAIL}\", \"session_id\": \"mysession\", \"body\": \"${all_content}\"}"

      echo "Sending request to $WEBHOOKURL"

      # Store the curl command in a variable for debugging
      CURL_COMMAND="curl -s -w \"\n%{http_code}\" -X POST \"$WEBHOOKURL\" \
        -H \"Content-Type: application/json\" \
        -d '$JSON_PAYLOAD' \
        -u \"$ACCOUNT_SID:$AUTH_TOKEN\""

      # Echo the curl command for debugging
      echo "Running the following cURL command:"
      echo "$CURL_COMMAND"

      # Execute the stored curl command and capture the response
      RESPONSE=$(eval "$CURL_COMMAND")

      # Extract the HTTP status code (last line) and body (everything else)
      HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
      BODY=$(echo "$RESPONSE" | sed '$d')

      # Print debugging information
      echo "HTTP Status Code: $HTTP_CODE"
      echo "Response Body: $BODY"

      if [ "$HTTP_CODE" -eq 200 ]; then
        echo "✅ Request successfully sent to webhook"

        # Parsing the response right after a successful call
        echo "Parsing Structured Text Response"

        # Extract the assessment and reason from plain text response
        ASSESSMENT=$(echo "$BODY" | sed -n 's/^Assessment: \([^\.]*\)\..*/\1/p')
        REASON=$(echo "$BODY" | sed -n 's/.*Reason: \(.*\)$/\1/p')

        echo "Assessment: $ASSESSMENT"
        echo "Reason: $REASON"

        # Store in environment variables
        echo "assessment=$ASSESSMENT" >> "$GITHUB_ENV"
        echo "reason=$REASON" >> "$GITHUB_ENV"

        # Set outputs directly
        echo "assessment=$ASSESSMENT" >> "$GITHUB_OUTPUT"
        echo "reason=$REASON" >> "$GITHUB_OUTPUT"

      else
        echo "❌ Failed to send request to webhook. HTTP status code: $HTTP_CODE"
        exit 1
      fi
